// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id, created_at, updated_at, name, url, user_id)
values (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING id, created_at, updated_at, name, url, user_id, last_fetched_at
`

type CreateFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const fetchAllFeeds = `-- name: FetchAllFeeds :many
select
f.id, f.created_at, f.updated_at, f.name, f.url, f.user_id, f.last_fetched_at,
u.name as user_name
from feeds f
inner join users u on u.id = f.user_id
`

type FetchAllFeedsRow struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Name          string
	Url           string
	UserID        uuid.UUID
	LastFetchedAt sql.NullTime
	UserName      string
}

func (q *Queries) FetchAllFeeds(ctx context.Context) ([]FetchAllFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchAllFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchAllFeedsRow
	for rows.Next() {
		var i FetchAllFeedsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.LastFetchedAt,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchFeedByUrl = `-- name: FetchFeedByUrl :one
select
f.id, f.created_at, f.updated_at, f.name, f.url, f.user_id, f.last_fetched_at,
u.name as user_name
from feeds f
inner join users u on u.id = f.user_id
where f.url = $1
`

type FetchFeedByUrlRow struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Name          string
	Url           string
	UserID        uuid.UUID
	LastFetchedAt sql.NullTime
	UserName      string
}

func (q *Queries) FetchFeedByUrl(ctx context.Context, url string) (FetchFeedByUrlRow, error) {
	row := q.db.QueryRowContext(ctx, fetchFeedByUrl, url)
	var i FetchFeedByUrlRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
		&i.UserName,
	)
	return i, err
}
